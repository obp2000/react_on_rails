import fetch from 'cross-fetch'

export const REQUEST_CUSTOMERS = 'REQUEST_CUSTOMERS'
export const RECEIVE_CUSTOMERS = 'RECEIVE_CUSTOMERS'
export const REQUEST_DELETE_CUSTOMER = 'REQUEST_DELETE_CUSTOMER'
export const RECEIVE_DELETE_CUSTOMER = 'RECEIVE_DELETE_CUSTOMER'
export const REQUEST_CUSTOMER = 'REQUEST_CUSTOMER'
export const RECEIVE_CUSTOMER = 'RECEIVE_CUSTOMER'
export const REQUEST_UPDATE_CUSTOMER = 'REQUEST_UPDATE_CUSTOMER'
export const RECEIVE_UPDATE_CUSTOMER = 'RECEIVE_UPDATE_CUSTOMER'

function requestCustomers() {
  return {
    type: REQUEST_CUSTOMERS
  }
}

function receiveCustomers(json) {
  return {
    type: RECEIVE_CUSTOMERS,
    customers: json.results,
    totalCount: json.totalCount
  }
}

export function fetchCustomers() {
  return dispatch => {
    dispatch(requestCustomers())
    return fetch(`/api/customers.json`)
           .then(response => response.json())
           .then(json => dispatch(receiveCustomers(json)))
  }
}

export function fetchCustomersIfNeeded() {
  return (dispatch, getState) => {
    if (!getState().customers.loaded) {
      return dispatch(fetchCustomers())
    }
  }
}

function requestCustomer() {
  return {
    type: REQUEST_CUSTOMER
  }
}

function receiveCustomer(json) {
  return {
    type: RECEIVE_CUSTOMER,
    customer: json
  }
}

function requestUpdateCustomer() {
  return {
    type: REQUEST_UPDATE_CUSTOMER
  }
}

function receiveUpdateCustomer(customer_id, json) {
  return {
    type: RECEIVE_UPDATE_CUSTOMER,
    customer_id,
    json
  }
}

export function updateCustomer(customer_id, values) {
  const formData = new FormData();
  $.each(values, (key, value) => {
      if (key != 'image' || value.name) {
          formData.append('customer[' + key + ']', value);
      }
  });
  return dispatch => {
    dispatch(requestUpdateCustomer())
    return fetch('/api/customers/' + (customer_id == 'new' ? '' : customer_id), 
            { method: customer_id == 'new' ? 'POST' : 'PUT', body: formData})
          .then(response => response.json())
          .then(json => dispatch(receiveUpdateCustomer(customer_id, json)))
  }
}

export function fetchCustomer(customer_id) {
  // console.log('customer_id: ', customer_id)
  return dispatch => {
    dispatch(requestCustomer())
    if (customer_id == 'new') {
      return dispatch(receiveCustomer({}))
    } else {
      return fetch(`/api/customers/${customer_id}`)
            .then(response => response.json())
            .then(json => dispatch(receiveCustomer(json)))
    }
  }
}

export function fetchCustomerIfNeeded(customer_id) {
  return (dispatch, getState) => {
    if (true) {
      return dispatch(fetchCustomer(customer_id))
    }
  }
}

function requestDeleteCustomer() {
  return {
    type: REQUEST_DELETE_CUSTOMER
  }
}

function receiveDeleteCustomer(customer_id) {
  return {
    type: RECEIVE_DELETE_CUSTOMER,
    customer_id
  }
}

export function deleteCustomer(customer_id) {
  return dispatch => {
    dispatch(requestDeleteCustomer())
    return fetch(`/api/customers/${customer_id}`, { method: 'DELETE' })
           .then(() => dispatch(receiveDeleteCustomer(customer_id)))
  }
}

// function shouldFetchPosts(state, subreddit) {
//   const posts = state.postsBySubreddit[subreddit]
//   if (!posts) {
//     return true
//   } else if (posts.isFetching) {
//     return false
//   } else {
//     return posts.didInvalidate
//   }
// }

// export function fetchPostsIfNeeded(subreddit) {
//   return (dispatch, getState) => {
//     if (shouldFetchPosts(getState(), subreddit)) {
//       return dispatch(fetchPosts(subreddit))
//     }
//   }
// }

